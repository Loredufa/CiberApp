// src/PentestUpload.jsx
import { useRef, useState } from "react";

// ENV para Pentest
// VITE_N8N_WEBHOOK_URL_PENTEST = https://TU-DOMINIO-N8N/webhook/pentest
// VITE_N8N_FILE_FIELD_NAME_PENTEST = file  (o 'data' si tu webhook espera ese campo)
const PENTEST_WEBHOOK_URL = "https://ciber-app-git-ciberapp.apps.focus-ocp-sno-virt.datco.net/webhook/pentest";
const PENTEST_FILE_FIELD = "data";

function extractFilenameFromDisposition(disposition) {
  if (!disposition) return null;
  const m =
    disposition.match(/filename\*=UTF-8''([^;]+)$/i) ||
    disposition.match(/filename="?([^";]+)"?/i);
  try { return m ? decodeURIComponent(m[1]) : null; } catch { return m ? m[1] : null; }
}

// pequeño icono (candado)
const IconLock = (props) => (
  <svg width="22" height="22" viewBox="0 0 24 24" fill="none" {...props}>
    <rect x="4" y="11" width="16" height="9" rx="2" stroke="currentColor" strokeWidth="1.6"/>
    <path d="M8 11V8a4 4 0 1 1 8 0v3" stroke="currentColor" strokeWidth="1.6"/>
  </svg>
);

export default function PentestUpload() {
  const inputRef = useRef(null);
  const [file, setFile] = useState(null);
  const [submitting, setSubmitting] = useState(false);
  const [status, setStatus] = useState("");
  const [error, setError] = useState("");

  function onPickFile(e) {
    const f = e.target.files?.[0];
    if (f) { setFile(f); setError(""); setStatus(""); }
  }

  async function handleSubmit(e) {
    e.preventDefault(); setError(""); setStatus("");
    if (!PENTEST_WEBHOOK_URL) { setError("Configura VITE_N8N_WEBHOOK_URL_PENTEST en tu .env"); return; }
    if (!file) { setError("Selecciona un .xlsx/.xls/.csv con cabecera IPS"); return; }

    try {
      setSubmitting(true); setStatus("Subiendo archivo y ejecutando pentest… (puede demorar)");
      const form = new FormData(); form.append(PENTEST_FILE_FIELD, file, file.name);
      const res = await fetch(PENTEST_WEBHOOK_URL, { method: "POST", body: form });
      if (!res.ok) {
        const text = await res.text().catch(() => "");
        throw new Error(`n8n respondió ${res.status}. ${text || "Revisá el flujo de pentest"}`);
      }
      const ct = (res.headers.get("content-type") || "").toLowerCase();

      // Si n8n devuelve DOCX, descargar
      if (
        ct.includes("application/vnd.openxmlformats-officedocument.wordprocessingml.document") ||
        ct.includes("application/octet-stream")
      ) {
        const blob = await res.blob();
        const suggested = extractFilenameFromDisposition(res.headers.get("content-disposition")) || "ReportePentest.docx";
        const url = URL.createObjectURL(blob); const a = document.createElement("a");
        a.href = url; a.download = suggested; a.click(); URL.revokeObjectURL(url);
        setStatus("Reporte de pentest descargado ✅"); return;
      }

      // Si devuelve JSON o texto (por ejemplo un link), mostrarlo
      if (ct.includes("application/json")) {
        const data = await res.json(); setStatus(`Respuesta JSON: ${JSON.stringify(data).slice(0,160)}…`); return;
      }
      const txt = await res.text(); setStatus(`Respuesta texto: ${txt.slice(0,160)}…`);
    } catch (err) {
      console.error(err); setError(err.message || "Error desconocido al contactar n8n");
    } finally { setSubmitting(false); }
  }

  // estilos mínimos locales
  const styles = {
    panel: { background: "#151924", border: "1px solid #273043", borderRadius: 16, padding: 22, boxShadow: "0 10px 35px rgba(0,0,0,.35)" },
    h2row: { display: "flex", alignItems: "center", gap: 10 },
    h2: { margin: 0, fontSize: 22 },
    desc: { opacity: .85, margin: "6px 0 16px" },
    input: { background: "#0f1420", border: "1px solid #3a4761", borderRadius: 10, padding: 12, color: "#d7def5" },
    row: { display: "flex", gap: 10, marginTop: 18, alignItems: "center", flexWrap: "wrap" },
    btn: { background: "#4f7cff", color: "#fff", border: 0, borderRadius: 10, padding: "12px 16px", fontWeight: 600, cursor: "pointer" },
    btn2: { background: "transparent", color: "#c8d1e8", border: "1px solid #36415a", borderRadius: 10, padding: "12px 16px", fontWeight: 600, cursor: "pointer" },
    info: { marginTop: 16, padding: "10px 12px", borderRadius: 10, fontSize: 14, background: "#0e1e34", border: "1px solid #283754", color: "#a6c0ff" },
    err: { marginTop: 16, padding: "10px 12px", borderRadius: 10, fontSize: 14, background: "#2a1113", border: "1px solid #5e272b", color: "#ffb4b4" },
    small: { marginTop: 12, fontSize: 12, opacity: .55 },
  };

  return (
    <div style={styles.panel}>
      <div style={styles.h2row}>
        <IconLock />
        <h2 style={styles.h2}>Pentest (Excel de IPs → n8n)</h2>
      </div>
      <p style={styles.desc}>Sube un <strong>.xlsx/.xls/.csv</strong> con cabecera <code>IPS</code>. El flujo devuelve un <strong>DOCX</strong> para descargar.</p>
      <form onSubmit={handleSubmit}>
        <input ref={inputRef} type="file" accept=".xlsx,.xls,.csv" onChange={onPickFile} style={styles.input} />
        <div style={styles.row}>
          <button type="submit" disabled={!file || submitting} style={styles.btn}>
            {submitting ? "Procesando…" : "Enviar a n8n"}
          </button>
          <button
            type="button"
            style={styles.btn2}
            disabled={submitting}
            onClick={() => { setFile(null); setError(""); setStatus(""); if (inputRef.current) inputRef.current.value = ""; }}
          >
            Limpiar
          </button>
          <span style={{ display: "inline-flex", alignItems: "center", gap: 6, fontSize: 13, padding: "6px 10px", borderRadius: 999, background: "#0e1e34", border: "1px solid #283754", color: "#a6c0ff" }}>
            Pentest Webhook: <code style={{ opacity: .8, marginLeft: 6 }}>{PENTEST_WEBHOOK_URL || "— no configurado —"}</code> · Campo: <code>{PENTEST_FILE_FIELD}</code>
          </span>
        </div>
      </form>
      {status && <div style={styles.info}>{status}</div>}
      {error && <div style={styles.err}>{error}</div>}
      <div style={styles.small}>Plantilla mínima: columna <strong>IPS</strong> y una IP por fila.</div>
    </div>
  );
}
