import React, { useEffect, useRef, useState } from "react";

/**
 * PentestUpload
 * ─────────────────────────────────────────────────────────────────────────────
 * Componente que permite:
 * 1) Subir un Excel con columna "IPS" (listado de IPs)
 * 2) Enviar el archivo a un backend propio (POST /api/pentest)
 * 3) Mostrar estado (en progreso / listo) con polling
 * 4) Descargar el reporte final (DOCX) cuando esté listo
 * 5) (Opcional) Recibir notificación por email cuando finaliza
 *
 * Requiere en el backend:
 *  - POST   /api/pentest                   -> crea job y reenvía a n8n (webhook)
 *  - GET    /api/pentest/status/:jobId     -> devuelve { status, downloadUrl? }
 *  - GET    /api/pentest/download/:jobId   -> descarga el DOCX final (stream)
 *  - POST   /api/pentest/callback/:jobId   -> endpoint de callback para n8n
 */

export default function PentestUpload() {
  const [file, setFile] = useState<File | null>(null)
  const [email, setEmail] = useState("")
  const [jobId, setJobId] = useState<string | null>(null)
  const [status, setStatus] = useState<"idle" | "uploading" | "queued" | "running" | "done" | "error">("idle")
  const [message, setMessage] = useState<string>("")
  const [downloadUrl, setDownloadUrl] = useState<string | null>(null)
  const pollTimer = useRef<number | null>(null)

  const reset = () => {
    setFile(null)
    setEmail("")
    setJobId(null)
    setStatus("idle")
    setMessage("")
    setDownloadUrl(null)
    if (pollTimer.current) window.clearInterval(pollTimer.current)
  }

  const onFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const f = e.target.files?.[0]
    if (!f) return
    const allowed = ["application/vnd.ms-excel", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"]
    if (!allowed.includes(f.type) && !f.name.match(/\.(xlsx|xls)$/i)) {
      setMessage("Formato inválido. Subí un .xlsx o .xls con la columna 'IPS'.")
      return
    }
    if (f.size > 25 * 1024 * 1024) { // 25 MB
      setMessage("El archivo supera 25 MB.")
      return
    }
    setMessage("")
    setFile(f)
  }

  const startPolling = (id: string) => {
    if (pollTimer.current) window.clearInterval(pollTimer.current)
    pollTimer.current = window.setInterval(async () => {
      try {
        const res = await fetch(`/api/pentest/status/${id}`)
        const data = await res.json()
        if (data.status) setStatus(data.status)
        if (data.status === "done" && data.downloadUrl) {
          setDownloadUrl(data.downloadUrl)
          if (pollTimer.current) window.clearInterval(pollTimer.current)
        }
        if (data.status === "error") {
          setMessage(data.error || "Hubo un error en el procesamiento.")
          if (pollTimer.current) window.clearInterval(pollTimer.current)
        }
      } catch (err) {
        console.error(err)
      }
    }, 10_000) // cada 10s
  }

  const onSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!file) {
      setMessage("Subí un Excel con la columna 'IPS'.")
      return
    }

    // Armado del payload
    const fd = new FormData()
    fd.append("file", file)
    if (email) fd.append("email", email)

    setStatus("uploading")
    setMessage("Enviando archivo…")

    try {
      const res = await fetch("/api/pentest", { method: "POST", body: fd })
      if (!res.ok) throw new Error(`HTTP ${res.status}`)
      const data = await res.json()
      if (!data.jobId) throw new Error("Respuesta inválida del servidor")
      setJobId(data.jobId)
      setStatus("queued")
      setMessage("Flujo iniciado. Esto tarda ~20–30 min. Podés dejar esta página abierta.")
      startPolling(data.jobId)
    } catch (err: any) {
      console.error(err)
      setStatus("error")
      setMessage(err?.message || "Error al iniciar el flujo.")
    }
  }

  useEffect(() => {
    return () => { if (pollTimer.current) window.clearInterval(pollTimer.current) }
  }, [])

  return (
    <div className="max-w-2xl mx-auto p-6">
      <div className="mb-6">
        <h1 className="text-2xl font-semibold">Pentest por Lote (n8n)</h1>
        <p className="text-sm text-gray-600 mt-1">
          Subí un Excel <code className="px-1 py-0.5 bg-gray-100 rounded">.xlsx/.xls</code> con una columna
          <code className="ml-1 px-1 py-0.5 bg-gray-100 rounded">IPS</code>. El proceso tarda ~20–30 minutos.
        </p>
      </div>

      <form onSubmit={onSubmit} className="space-y-4">
        <div className="border-2 border-dashed rounded-2xl p-6 flex flex-col items-center gap-3">
          <input
            id="file"
            type="file"
            accept=".xlsx,.xls"
            onChange={onFileChange}
            className="block w-full text-sm text-gray-700 file:mr-4 file:py-2 file:px-4 file:rounded-xl file:border-0 file:text-sm file:font-semibold file:bg-gray-100 hover:file:bg-gray-200"
          />
          <p className="text-xs text-gray-500">Plantilla mínima: una hoja con cabecera <strong>IPS</strong> y una IP por fila.</p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <label className="block">
            <span className="text-sm text-gray-700">Email (opcional para notificación)</span>
            <input
              type="email"
              placeholder="tucuenta@dominio.com"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="mt-1 w-full rounded-xl border px-3 py-2 focus:outline-none focus:ring-2"
            />
          </label>
          <div className="flex items-end gap-3">
            <button
              type="submit"
              disabled={status === "uploading" || status === "queued" || status === "running"}
              className="rounded-2xl px-4 py-2 bg-blue-600 text-white disabled:opacity-60 shadow"
            >
              {status === "uploading" ? "Enviando…" : "Iniciar Pentest"}
            </button>
            <button
              type="button"
              onClick={reset}
              className="rounded-2xl px-4 py-2 bg-gray-100"
            >
              Limpiar
            </button>
          </div>
        </div>
      </form>

      {/* Estado */}
      {message && (
        <div className="mt-4 text-sm text-gray-700">{message}</div>
      )}

      {jobId && (
        <div className="mt-4 p-4 rounded-xl bg-gray-50">
          <div className="flex items-center justify-between">
            <div>
              <div className="text-sm text-gray-600">ID de trabajo</div>
              <div className="font-mono text-sm">{jobId}</div>
            </div>
            <span className={`text-xs rounded-full px-3 py-1 ${
              status === "done" ? "bg-green-100 text-green-700" :
              status === "error" ? "bg-red-100 text-red-700" :
              status === "queued" || status === "running" || status === "uploading" ? "bg-yellow-100 text-yellow-800" :
              "bg-gray-100 text-gray-700"
            }`}>
              {status.toUpperCase()}
            </span>
          </div>

          {(status === "queued" || status === "running" || status === "uploading") && (
            <div className="mt-3">
              <div className="h-2 w-full bg-gray-200 rounded-xl overflow-hidden">
                <div className="h-2 w-1/3 animate-pulse bg-blue-500 rounded-xl" />
              </div>
              <p className="text-xs text-gray-500 mt-2">
                El flujo está corriendo en n8n. Podés navegar y volver luego; al finalizar te mostraremos el enlace de descarga.
              </p>
            </div>
          )}

          {status === "done" && downloadUrl && (
            <div className="mt-4 flex items-center gap-3">
              <a
                href={downloadUrl}
                className="inline-flex items-center rounded-2xl bg-green-600 text-white px-4 py-2 shadow"
              >
                Descargar reporte (DOCX)
              </a>
              <button
                onClick={reset}
                className="px-3 py-2 rounded-2xl bg-gray-100"
              >
                Nuevo envío
              </button>
            </div>
          )}

          {status === "error" && (
            <div className="mt-3 text-sm text-red-700">
              Ocurrió un error. Revisá los logs del backend y del flujo de n8n.
            </div>
          )}
        </div>
      )}

      {/* Tips */}
      <div className="mt-8 p-4 border rounded-2xl bg-white">
        <h2 className="font-semibold mb-2">Requisitos del archivo</h2>
        <ul className="list-disc pl-5 text-sm text-gray-700 space-y-1">
          <li>Formato: .xlsx o .xls</li>
          <li>Hoja principal con columna <strong>IPS</strong> y una IP por fila.</li>
          <li>Tamaño máximo recomendado: 25 MB.</li>
        </ul>
      </div>
    </div>
  )
}
